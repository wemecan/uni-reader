<template>
	<view class="list-scroll">
		<list ref="list" :scrollable="scrollable" @scroll="scroll" :loadmoreoffset="loadmoreoffset" @loadmore="loadmore">
			<cell ref="listTop">
				<slot name="listTop"></slot>
			</cell>
			<cell v-for="(lists, i) in listSync">
				<view class="list" >
					<view ref="child" :style="{width: itemWidth + 'rpx', height: childHeight ? childHeight + 'px' : 'auto'}" v-for="(child, index) in lists" :key="index">
						<block v-if="childHeight ? ((i * childHeight) + childTop < (offsetY + parentHeight) && ((i + 1) * childHeight) + childTop > offsetY) : true">
							<slot :item="child"></slot>
						</block>
					</view>
				</view>
			</cell>
		</list>
	</view>
</template>

<script>
	const dom = weex.requireModule('dom');
	export default {
		props: {
			//列数
			columnCount: {
				type: Number,
				default: 1
			},
			//一次最多渲染多少列
			rowCount: {
				type: Number,
				default: 4
			},
			//是否禁用滚动
			scrollable: {
				type: Boolean,
				default: true
			},
			//列表数据
			list: {
				type: Array,
				default () {
					return new Array();
				}
			},
			//离底部多少像素时触发加载更多事件
			loadmoreoffset: {
				type: Number,
				default: 50
			},
			//触发滚动事件的频率，没多少像素触发一次
			offsetAccuracy: {
				type: Number,
				default: 5
			}
		},
		computed: {
			//多列列表数据
			listSync() {
				let arr = [];
				let j = -1;
				for (let i in this.list) {
					if (i % this.columnCount == 0) {
						j++;
						this.$set(arr, j, []);
					}
					arr[j].push(this.list[i]);
				}
				return arr;
			},
			itemWidth() {
				return 750 / this.columnCount;
			}
		},
		data() {
			return {
				parentHeight: 0,
				childHeight: 0,
				childTop: 0,
				offsetY: 0
			}
		},
		mounted () {
			setTimeout(async () => {
				//顶部插槽高度为第一条数据离顶部的距离
				this.childTop = await this.getListTopHeight();
				this.parentHeight = await this.getListHeight();
				if ( this.listSync.length > 0 ) {
					this.childHeight = await this.getChildHeight();
				}
			}, 50)
		},
		methods: {
			scroll(e) {
				this.offsetY = Math.abs(e.contentOffset.y);
				this.$emit('scroll', e)
			},
			loadmore(e) {
				this.$emit('loadmore', e);
			},
			//获取每行数据的高度
			getChildHeight() {
				return new Promise((resolve, reject) => {
					dom.getComponentRect(this.$refs.child[0], (res) => {
						resolve(res.size.height)
					})
				})
			},
			//获取顶部插槽的高度
			getListTopHeight() {
				return new Promise((resolve, reject) => {
					dom.getComponentRect(this.$refs.listTop, (res) => {
						resolve(res.size.height)
					})
				})
			},
			//获取滚动区域的高度
			getListHeight() {
				return new Promise((resolve, reject) => {
					dom.getComponentRect(this.$refs.list, (res) => {
						resolve(res.size.height)
					})
				})
			}
		},
		watch: {
			listSync (newVal) {
				if ( !this.childHeight ) {
					setTimeout(async () => {
						this.childHeight = await this.getChildHeight();
					}, 50)
				}
			}
		}
	}
</script>

<style scoped>
	.list-scroll {
		flex: 1;
		width: 750rpx;
	}

	.list {
		flex-direction: row;
		flex-wrap: wrap;
	}
</style>
