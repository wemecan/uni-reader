<template>
	<view class="list-scroll">
		<list ref="list" :scrollable="scrollable" @scroll="scroll" :loadmoreoffset="loadmoreoffset" @loadmore="loadmore">
			<cell>
				<slot name="listTop"></slot>
			</cell>
			<cell v-for="(lists, i) in listSync">
				<view class="list" ref="listItem">
					<view class="list-item" :style="{width: itemWidth + 'rpx', height: lineHeight + 'rpx'}" v-for="(child, index) in lists" :key="index">
						<block v-if="Math.abs(offsetY) < (i + 1) * childHeight && i * childHeight < (Math.abs(offsetY) + windowHeight)">
							<slot :item="child"></slot>
						</block>
					</view>
				</view>
			</cell>
			<slot name="fixed"></slot>
		</list>
	</view>
</template>

<script>
	const dom = weex.requireModule('dom');
	export default {
		props: {
			//列数
			columnCount: {
				type: Number,
				default: 1
			},
			lineHeight: {
				type: Number,
				default: 100
			},
			//是否禁用滚动
			scrollable: {
				type: Boolean,
				default: true
			},
			//列表数据
			list: {
				type: Array,
				default () {
					return new Array();
				}
			},
			//离底部多少像素时触发加载更多事件
			loadmoreoffset: {
				type: Number,
				default: 50
			},
			//触发滚动事件的频率，没多少像素触发一次
			offsetAccuracy: {
				type: Number,
				default: 5
			}
		},
		computed: {
			itemWidth() {
				return 750 / this.columnCount;
			}
		},
		mounted () {
			if ( this.list.length > 0 ) {
				setTimeout(() => {
					this.getListSync();
				}, 50)
			}
		},
		data() {
			return {
				childHeight: 0,
				windowHeight: 0,
				offsetY: 0,
				listSync: []
			}
		},
		methods: {
			scroll(e) {
				this.offsetY = e.contentOffset.y;
				this.$emit('scroll', e)
			},
			loadmore(e) {
				this.$emit('loadmore', e);
			},
			//计算数据
			getListSync() {
				dom.getComponentRect(this.$refs.list, (res) => {
					this.windowHeight = res.size.height;
					let maxCount = parseInt(this.columnCount * Math.ceil(res.size.height / uni.upx2px(this.lineHeight)));
					let arr = [];
					let j = -1;
					for (let i in this.list) {
						if (i % maxCount == 0) {
							j++;
							this.$set(arr, j, []);
						}
						arr[j].push(this.list[i]);
					}
					this.listSync = arr;
					setTimeout(() => {
						this.getItemHeight();
					}, 100)
				})
			},
			getItemHeight () {
				dom.getComponentRect(this.$refs.listItem[0], (res) => {
					this.childHeight = res.size.height;
				})
			}
		},
		watch: {
			list () {
				if ( this.list.length > 0 ) {
					setTimeout(() => {
						this.getListSync();
					}, 50)
				}
			}
		}
	}
</script>

<style scoped>
	.list-scroll {
		flex: 1;
		width: 750rpx;
	}

	.list {
		flex-direction: row;
		flex-wrap: wrap;
	}
	.list-item {
		position: relative;
	}
	.list-loading {
		justify-content: center;
		align-items: center;
		flex: 1;
	}
</style>
